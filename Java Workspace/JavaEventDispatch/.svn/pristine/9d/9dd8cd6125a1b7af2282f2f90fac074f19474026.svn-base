package velinov.java.bean.list;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import velinov.java.bean.AbsBean;
import velinov.java.bean.Bean;


/**
 * An implementation of {@code List} as a {@link Bean}.
 * 
 * @author Vladimir Velinov
 * @param <T> the data type of the Objects which will be stored in the List.
 * @since 18.03.2015
 *
 */
public class BeanList<T> extends AbsBean implements Iterable<T> {
  
  /**
   * Property which describes an event fired when an element has been added 
   * to the List.
   */
  @SuppressWarnings("nls")
  public static final String PROPERTY_ADDED_ELEMENT   = "addedElement";
  
  /**
   * Property which describes an event fired when an element has been removed 
   * from the List. 
   */
  @SuppressWarnings("nls")
  public static final String PROPERTY_REMOVED_ELEMENT = "removedElement";
  
  private final List<T> list;
  
  /**
   * Default empty constructor.
   */
  public BeanList() {
    this.list = new ArrayList<T>();
  }
  
  /**
   * Add the specified element to the end of the list.
   * @param _element the element to be added.
   */
  @SuppressWarnings("nls")
  public synchronized void addElement(T _element) {
    if (_element == null) {
      throw new NullPointerException("element");
    }
    
    this.list.add(this.list.size(), _element);
    this.firePropertyChange(PROPERTY_ADDED_ELEMENT, null, _element);
  }
  
  /**
   * Removes the specified element from the list.
   * @param _element the element to be removed.
   */
  @SuppressWarnings("nls")
  public synchronized void removeElement(T _element) {
    if (_element == null) {
      throw new NullPointerException("element");
    }
    
    this.list.remove(_element);
    this.firePropertyChange(PROPERTY_REMOVED_ELEMENT, null, _element);
  }

  @Override
  public Iterator<T> iterator() {
    return this.list.iterator();
  }

}
